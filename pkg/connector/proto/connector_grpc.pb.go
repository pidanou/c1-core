// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/connector/proto/connector.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Connector_Sync_FullMethodName = "/proto.Connector/Sync"
)

// ConnectorClient is the client API for Connector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*EndSync, error)
}

type connectorClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorClient(cc grpc.ClientConnInterface) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*EndSync, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndSync)
	err := c.cc.Invoke(ctx, Connector_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServer is the server API for Connector service.
// All implementations must embed UnimplementedConnectorServer
// for forward compatibility.
type ConnectorServer interface {
	Sync(context.Context, *SyncRequest) (*EndSync, error)
	mustEmbedUnimplementedConnectorServer()
}

// UnimplementedConnectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectorServer struct{}

func (UnimplementedConnectorServer) Sync(context.Context, *SyncRequest) (*EndSync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedConnectorServer) mustEmbedUnimplementedConnectorServer() {}
func (UnimplementedConnectorServer) testEmbeddedByValue()                   {}

// UnsafeConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServer will
// result in compilation errors.
type UnsafeConnectorServer interface {
	mustEmbedUnimplementedConnectorServer()
}

func RegisterConnectorServer(s grpc.ServiceRegistrar, srv ConnectorServer) {
	// If the following call pancis, it indicates UnimplementedConnectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Connector_ServiceDesc, srv)
}

func _Connector_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connector_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Connector_ServiceDesc is the grpc.ServiceDesc for Connector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Connector_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/connector/proto/connector.proto",
}

const (
	CallbackHandler_Upsert_FullMethodName = "/proto.CallbackHandler/Upsert"
	CallbackHandler_Clean_FullMethodName  = "/proto.CallbackHandler/Clean"
)

// CallbackHandlerClient is the client API for CallbackHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbackHandlerClient interface {
	Upsert(ctx context.Context, in *SyncResponse, opts ...grpc.CallOption) (*Empty, error)
	Clean(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type callbackHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackHandlerClient(cc grpc.ClientConnInterface) CallbackHandlerClient {
	return &callbackHandlerClient{cc}
}

func (c *callbackHandlerClient) Upsert(ctx context.Context, in *SyncResponse, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CallbackHandler_Upsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackHandlerClient) Clean(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CallbackHandler_Clean_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallbackHandlerServer is the server API for CallbackHandler service.
// All implementations must embed UnimplementedCallbackHandlerServer
// for forward compatibility.
type CallbackHandlerServer interface {
	Upsert(context.Context, *SyncResponse) (*Empty, error)
	Clean(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedCallbackHandlerServer()
}

// UnimplementedCallbackHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCallbackHandlerServer struct{}

func (UnimplementedCallbackHandlerServer) Upsert(context.Context, *SyncResponse) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedCallbackHandlerServer) Clean(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clean not implemented")
}
func (UnimplementedCallbackHandlerServer) mustEmbedUnimplementedCallbackHandlerServer() {}
func (UnimplementedCallbackHandlerServer) testEmbeddedByValue()                         {}

// UnsafeCallbackHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbackHandlerServer will
// result in compilation errors.
type UnsafeCallbackHandlerServer interface {
	mustEmbedUnimplementedCallbackHandlerServer()
}

func RegisterCallbackHandlerServer(s grpc.ServiceRegistrar, srv CallbackHandlerServer) {
	// If the following call pancis, it indicates UnimplementedCallbackHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CallbackHandler_ServiceDesc, srv)
}

func _CallbackHandler_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackHandlerServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackHandler_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackHandlerServer).Upsert(ctx, req.(*SyncResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackHandler_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackHandlerServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackHandler_Clean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackHandlerServer).Clean(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CallbackHandler_ServiceDesc is the grpc.ServiceDesc for CallbackHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallbackHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CallbackHandler",
	HandlerType: (*CallbackHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _CallbackHandler_Upsert_Handler,
		},
		{
			MethodName: "Clean",
			Handler:    _CallbackHandler_Clean_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/connector/proto/connector.proto",
}
